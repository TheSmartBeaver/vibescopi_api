// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NetTopologySuite.Geometries;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using VibeScopyAPI.Infrastructure;

#nullable disable

namespace VibeScopyAPI.Migrations
{
    [DbContext(typeof(VibeScopUnitOfWork))]
    [Migration("20230728151923_init")]
    partial class init
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.16")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.HasPostgresExtension(modelBuilder, "postgis");
            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("VibeScopyAPI.Models.Activity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("ActivityType")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Activities");
                });

            modelBuilder.Entity("VibeScopyAPI.Models.Answer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("AnswersFilamentId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("QuestionId")
                        .HasColumnType("uuid");

                    b.Property<short>("Value")
                        .HasColumnType("smallint");

                    b.HasKey("Id");

                    b.HasIndex("AnswersFilamentId");

                    b.HasIndex("QuestionId");

                    b.ToTable("Answer");
                });

            modelBuilder.Entity("VibeScopyAPI.Models.AnswersFilament", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("FilamentValue")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("LastUpdate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("ProfileId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ProfilePropositionId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("QuestionFilamentId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ProfilePropositionId");

                    b.HasIndex("QuestionFilamentId");

                    b.ToTable("AnswersFilaments");
                });

            modelBuilder.Entity("VibeScopyAPI.Models.Photo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("AWSPathS3")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("ProfileId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ProfileId");

                    b.ToTable("Photo");
                });

            modelBuilder.Entity("VibeScopyAPI.Models.Profile", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Langages")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("SubscriptionType")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Profiles");
                });

            modelBuilder.Entity("VibeScopyAPI.Models.ProfileProposition", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("BirthDay")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Height")
                        .HasColumnType("integer");

                    b.Property<string>("Hobbies")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsVerified")
                        .HasColumnType("boolean");

                    b.Property<Point>("Location")
                        .IsRequired()
                        .HasColumnType("geography (point)");

                    b.HasKey("Id");

                    b.ToTable("ProfilePropositions");
                });

            modelBuilder.Entity("VibeScopyAPI.Models.Question", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.ToTable("Question");
                });

            modelBuilder.Entity("VibeScopyAPI2.Models.PossibleAnswer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("QuestionFilamentId")
                        .HasColumnType("uuid");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<short>("Value")
                        .HasColumnType("smallint");

                    b.HasKey("Id");

                    b.HasIndex("QuestionFilamentId");

                    b.ToTable("PossibleAnswer");
                });

            modelBuilder.Entity("VibeScopyAPI2.Models.QuestionFilament", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("QuestionFilament");
                });

            modelBuilder.Entity("VibeScopyAPI2.Models.SwipedUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("ProfileId")
                        .HasColumnType("uuid");

                    b.Property<int>("SwipeStatus")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ProfileId");

                    b.ToTable("SwipedUser");
                });

            modelBuilder.Entity("VibeScopyAPI.Models.Answer", b =>
                {
                    b.HasOne("VibeScopyAPI.Models.AnswersFilament", null)
                        .WithMany("Answers")
                        .HasForeignKey("AnswersFilamentId");

                    b.HasOne("VibeScopyAPI.Models.Question", "Question")
                        .WithMany()
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Question");
                });

            modelBuilder.Entity("VibeScopyAPI.Models.AnswersFilament", b =>
                {
                    b.HasOne("VibeScopyAPI.Models.ProfileProposition", null)
                        .WithMany("AnswersFilaments")
                        .HasForeignKey("ProfilePropositionId");

                    b.HasOne("VibeScopyAPI2.Models.QuestionFilament", "QuestionFilament")
                        .WithMany()
                        .HasForeignKey("QuestionFilamentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("QuestionFilament");
                });

            modelBuilder.Entity("VibeScopyAPI.Models.Photo", b =>
                {
                    b.HasOne("VibeScopyAPI.Models.Profile", null)
                        .WithMany("Photos")
                        .HasForeignKey("ProfileId");
                });

            modelBuilder.Entity("VibeScopyAPI2.Models.PossibleAnswer", b =>
                {
                    b.HasOne("VibeScopyAPI2.Models.QuestionFilament", null)
                        .WithMany("PossibleAnswers")
                        .HasForeignKey("QuestionFilamentId");
                });

            modelBuilder.Entity("VibeScopyAPI2.Models.SwipedUser", b =>
                {
                    b.HasOne("VibeScopyAPI.Models.Profile", "Profile")
                        .WithMany("SwipedProfiles")
                        .HasForeignKey("ProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Profile");
                });

            modelBuilder.Entity("VibeScopyAPI.Models.AnswersFilament", b =>
                {
                    b.Navigation("Answers");
                });

            modelBuilder.Entity("VibeScopyAPI.Models.Profile", b =>
                {
                    b.Navigation("Photos");

                    b.Navigation("SwipedProfiles");
                });

            modelBuilder.Entity("VibeScopyAPI.Models.ProfileProposition", b =>
                {
                    b.Navigation("AnswersFilaments");
                });

            modelBuilder.Entity("VibeScopyAPI2.Models.QuestionFilament", b =>
                {
                    b.Navigation("PossibleAnswers");
                });
#pragma warning restore 612, 618
        }
    }
}

// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NetTopologySuite.Geometries;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using VibeScopyAPI.Infrastructure;

#nullable disable

namespace VibeScopyAPI.Migrations
{
    [DbContext(typeof(VibeScopUnitOfWork))]
    [Migration("20231027184703_ChangeCreatorConstraintLaunchedActivity")]
    partial class ChangeCreatorConstraintLaunchedActivity
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.16")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.HasPostgresExtension(modelBuilder, "postgis");
            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("VibeScopyAPI.Models.Activity", b =>
                {
                    b.Property<int>("ActivityCategory")
                        .HasColumnType("integer");

                    b.Property<int?>("ActivityCategory1")
                        .HasColumnType("integer");

                    b.HasKey("ActivityCategory");

                    b.HasIndex("ActivityCategory1");

                    b.ToTable("Activities");
                });

            modelBuilder.Entity("VibeScopyAPI.Models.Answer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("AnswersFilamentId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("QuestionId")
                        .HasColumnType("uuid");

                    b.Property<short>("Value")
                        .HasColumnType("smallint");

                    b.HasKey("Id");

                    b.HasIndex("AnswersFilamentId");

                    b.HasIndex("QuestionId");

                    b.ToTable("Answer");
                });

            modelBuilder.Entity("VibeScopyAPI.Models.AnswersFilament", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("FilamentValue")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("LastUpdate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ProfileId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ProfilePropositionId")
                        .HasColumnType("text");

                    b.Property<Guid>("QuestionFilamentId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ProfilePropositionId");

                    b.HasIndex("QuestionFilamentId");

                    b.ToTable("AnswersFilaments");
                });

            modelBuilder.Entity("VibeScopyAPI.Models.LaunchedActivity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("AccessConditions")
                        .HasColumnType("text");

                    b.Property<int>("ActivityCategory")
                        .HasColumnType("integer");

                    b.Property<string>("CreatorAuthentUid")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("EventDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Gender")
                        .HasColumnType("text");

                    b.Property<int?>("LevelRequired")
                        .HasColumnType("integer");

                    b.Property<Point>("Localisation")
                        .HasColumnType("geometry");

                    b.Property<short?>("MaxAge")
                        .HasColumnType("smallint");

                    b.Property<short?>("MaxParticipants")
                        .HasColumnType("smallint");

                    b.Property<short?>("MinAge")
                        .HasColumnType("smallint");

                    b.Property<short?>("MinParticipants")
                        .HasColumnType("smallint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CreatorAuthentUid");

                    b.ToTable("LaunchedActivities");
                });

            modelBuilder.Entity("VibeScopyAPI.Models.Photo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("AWSPathS3")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ProfileId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ProfileId");

                    b.ToTable("Photos");
                });

            modelBuilder.Entity("VibeScopyAPI.Models.ProfileProposition", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<DateTime>("BirthDay")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Height")
                        .HasColumnType("integer");

                    b.Property<string>("Hobbies")
                        .HasColumnType("text");

                    b.Property<bool>("IsVerified")
                        .HasColumnType("boolean");

                    b.Property<Point>("LastLocation")
                        .HasColumnType("geography (point)");

                    b.HasKey("Id");

                    b.ToTable("ProfilePropositions");
                });

            modelBuilder.Entity("VibeScopyAPI.Models.Question", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.ToTable("Question");
                });

            modelBuilder.Entity("VibeScopyAPI.Models.UserLikeProfile", b =>
                {
                    b.Property<string>("UserProfileId")
                        .HasColumnType("text");

                    b.Property<string>("LikedPersonId")
                        .HasColumnType("text");

                    b.Property<int>("RateAction")
                        .HasColumnType("integer");

                    b.HasKey("UserProfileId", "LikedPersonId");

                    b.HasIndex("LikedPersonId");

                    b.ToTable("UserLikeProfiles");
                });

            modelBuilder.Entity("VibeScopyAPI.Models.UserPreferences", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("FriendGenders")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("LookingRelationShips")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("LovingGenders")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("UserPreferences");
                });

            modelBuilder.Entity("VibeScopyAPI.Models.UserProfile", b =>
                {
                    b.Property<string>("AuthentUid")
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Langages")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Phone")
                        .HasColumnType("text");

                    b.Property<int>("SubscriptionType")
                        .HasColumnType("integer");

                    b.HasKey("AuthentUid");

                    b.HasIndex("AuthentUid")
                        .IsUnique();

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("Profiles");
                });

            modelBuilder.Entity("VibeScopyAPI2.Models.PossibleAnswer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("QuestionFilamentId")
                        .HasColumnType("uuid");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<short>("Value")
                        .HasColumnType("smallint");

                    b.HasKey("Id");

                    b.HasIndex("QuestionFilamentId");

                    b.ToTable("PossibleAnswer");
                });

            modelBuilder.Entity("VibeScopyAPI2.Models.QuestionFilament", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("QuestionFilament");
                });

            modelBuilder.Entity("VibeScopyAPI2.Models.SwipedUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ProfileAuthentUid")
                        .HasColumnType("text");

                    b.Property<int>("SwipeStatus")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ProfileAuthentUid");

                    b.ToTable("SwipedUser");
                });

            modelBuilder.Entity("VibeScopyAPI.Models.Activity", b =>
                {
                    b.HasOne("VibeScopyAPI.Models.Activity", null)
                        .WithMany("SubActivities")
                        .HasForeignKey("ActivityCategory1");
                });

            modelBuilder.Entity("VibeScopyAPI.Models.Answer", b =>
                {
                    b.HasOne("VibeScopyAPI.Models.AnswersFilament", null)
                        .WithMany("Answers")
                        .HasForeignKey("AnswersFilamentId");

                    b.HasOne("VibeScopyAPI.Models.Question", "Question")
                        .WithMany()
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Question");
                });

            modelBuilder.Entity("VibeScopyAPI.Models.AnswersFilament", b =>
                {
                    b.HasOne("VibeScopyAPI.Models.ProfileProposition", null)
                        .WithMany("AnswersFilaments")
                        .HasForeignKey("ProfilePropositionId");

                    b.HasOne("VibeScopyAPI2.Models.QuestionFilament", "QuestionFilament")
                        .WithMany()
                        .HasForeignKey("QuestionFilamentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("QuestionFilament");
                });

            modelBuilder.Entity("VibeScopyAPI.Models.LaunchedActivity", b =>
                {
                    b.HasOne("VibeScopyAPI.Models.UserProfile", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatorAuthentUid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Creator");
                });

            modelBuilder.Entity("VibeScopyAPI.Models.Photo", b =>
                {
                    b.HasOne("VibeScopyAPI.Models.UserProfile", "UserProfile")
                        .WithMany("Photos")
                        .HasForeignKey("ProfileId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("UserProfile");
                });

            modelBuilder.Entity("VibeScopyAPI.Models.ProfileProposition", b =>
                {
                    b.HasOne("VibeScopyAPI.Models.UserProfile", "User")
                        .WithOne("ProfileProposition")
                        .HasForeignKey("VibeScopyAPI.Models.ProfileProposition", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("VibeScopyAPI.Models.UserLikeProfile", b =>
                {
                    b.HasOne("VibeScopyAPI.Models.UserProfile", "LikedPerson")
                        .WithMany()
                        .HasForeignKey("LikedPersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VibeScopyAPI.Models.UserProfile", "UserProfile")
                        .WithMany("UsersLiked")
                        .HasForeignKey("UserProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LikedPerson");

                    b.Navigation("UserProfile");
                });

            modelBuilder.Entity("VibeScopyAPI2.Models.PossibleAnswer", b =>
                {
                    b.HasOne("VibeScopyAPI2.Models.QuestionFilament", null)
                        .WithMany("PossibleAnswers")
                        .HasForeignKey("QuestionFilamentId");
                });

            modelBuilder.Entity("VibeScopyAPI2.Models.SwipedUser", b =>
                {
                    b.HasOne("VibeScopyAPI.Models.UserProfile", "Profile")
                        .WithMany("SwipedProfiles")
                        .HasForeignKey("ProfileAuthentUid");

                    b.Navigation("Profile");
                });

            modelBuilder.Entity("VibeScopyAPI.Models.Activity", b =>
                {
                    b.Navigation("SubActivities");
                });

            modelBuilder.Entity("VibeScopyAPI.Models.AnswersFilament", b =>
                {
                    b.Navigation("Answers");
                });

            modelBuilder.Entity("VibeScopyAPI.Models.ProfileProposition", b =>
                {
                    b.Navigation("AnswersFilaments");
                });

            modelBuilder.Entity("VibeScopyAPI.Models.UserProfile", b =>
                {
                    b.Navigation("Photos");

                    b.Navigation("ProfileProposition")
                        .IsRequired();

                    b.Navigation("SwipedProfiles");

                    b.Navigation("UsersLiked");
                });

            modelBuilder.Entity("VibeScopyAPI2.Models.QuestionFilament", b =>
                {
                    b.Navigation("PossibleAnswers");
                });
#pragma warning restore 612, 618
        }
    }
}
